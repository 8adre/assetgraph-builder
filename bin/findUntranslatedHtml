#!/usr/bin/env node

var _ = require('underscore'),
    AssetGraph = require('../lib/AssetGraph'),
    i18nTools = require('../lib/i18nTools'),
    urlTools = require('urltools'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] [--parentdir] --root <inputRootDirectory><htmlFile>...')
        .boolean('parentdir')
        .demand(['root'])
        .argv;

var ignoreByAttributeName = {};

[
    'accesskey', 'class', 'contenteditable', 'contextmenu', 'dir', 'draggable', 'dropzone', 'hidden', 'id', 'lang', 'spellcheck', 'style', 'tabindex',
    'translate',
    'seamless', 'src', 'href', 'width', 'height', 'cellspacing', 'cellpadding',
    'data-bind', 'sizes', 'type', 'rel', 'charset', 'for', 'name', 'content', 'rows', 'cols', 'maxlength', 'data-dropdown', 'target', 'disabled', 'enctype', 'action', 'method', 'http-equiv',
    'data-toggle',
    'data-tooltip-placement', // One.com specific
    'frameborder', 'visible', 'role', 'hidefocus', 'autocomplete', 'data-elastic',
    'data-i18n'
].forEach(function (attributeName) {
    ignoreByAttributeName[attributeName] = true;
});

var ignoreByTagName = {};

[
    'style', 'script'
].forEach(function (tagName) {
    ignoreByTagName[tagName] = true;
});

new AssetGraph({root: commandLineOptions.root})
    .logEvents({repl: commandLineOptions.repl, stopOnWarning: commandLineOptions.stoponwarning, suppressJavaScriptCommonJsRequireWarnings: true})
    .registerRequireJsConfig({preventPopulationOfJavaScriptAssetsUntilConfigHasBeenFound: true})
    .registerLabelsAsCustomProtocols(commandLineOptions.label, {installFindParentDirectoryAsDefault: commandLineOptions.parentdir})
    .loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl))
    .populate({from: {type: 'Html'}, followRelations: {type: 'HtmlScript', to: {url: /^file:/}}})
    .assumeRequireJsConfigHasBeenFound()
    .populate({
        followRelations: {type: AssetGraph.query.not('HtmlAnchor'), to: {url: AssetGraph.query.not(/^https?:/)}}
    })
    .queue(function (assetGraph) {
        assetGraph.findAssets({isHtml: true}).forEach(function (htmlAsset) {
            var document = htmlAsset.parseTree;
            if (!document.body) {
                document = new AssetGraph.Html({text: '<html><body>' + document.outerHTML + '</body></html>'}).parseTree;
            }

            var occurrences = [];
            i18nTools.eachI18nTagInHtmlDocument(document, function (occurrence) {
                if (occurrence.key) {
                    occurrences.push(occurrence);
                }
            });

            var warnings = [];

            Array.prototype.slice.call(document.querySelectorAll('*')).forEach(function (element) {
                var elementName = element.nodeName.toLowerCase();
                if (ignoreByTagName[elementName]) {
                    return;
                }

                var hasNonWhitespaceChildNodes = Array.prototype.slice.call(element.childNodes).some(function (childNode) {
                    return childNode.nodeType === childNode.TEXT_NODE && !/^[\s\n]*$|^\d+$/.test(childNode.nodeValue);
                });
                var i18nAttributes = _.toArray(element.attributes).filter(function (attribute) {
                    var attributeName = attribute.nodeName.toLowerCase(),
                        attributeValue = attribute.nodeValue;
                    if (attributeName === 'value' && (elementName === 'option' || (elementName === 'input' && attributeName === 'hidden'))) {
                        return false;
                    }

                    return attributeValue !== '' && !ignoreByAttributeName[attributeName];
                });

                if (hasNonWhitespaceChildNodes || i18nAttributes.length > 0) {
                    var matchingOccurrences = occurrences.filter(function (occurrence) {
                        return occurrence.node === element;
                    });
                    if (hasNonWhitespaceChildNodes && !matchingOccurrences.some(function (matchingOccurrence) { return matchingOccurrence.type === 'i18nTagText'; })) {
                        warnings.push('No data-i18n attribute for contents of ' + element.outerHTML);
                    }
                    i18nAttributes.forEach(function (i18nAttribute) {
                        if (!matchingOccurrences.some(function (matchingOccurrence) {
                            return matchingOccurrence.type === 'i18nTagAttribute' &&
                            matchingOccurrence.attributeName.toLowerCase() === i18nAttribute.nodeName.toLowerCase();
                        })) {
                            warnings.push('No data-i18n attribute for \'' + i18nAttribute.nodeName + '\' attribute of ' + element.outerHTML);
                        }
                    });
                }
            });
            if (warnings.length > 0) {
                console.warn(htmlAsset.urlOrDescription + ':');
                warnings.forEach(function (warning) {
                    console.warn(warning.split(/\n/).map(function (line) {
                        return '    ' + line;
                    }).join('\n'));
                });
            }
        });
    })
    .run();
