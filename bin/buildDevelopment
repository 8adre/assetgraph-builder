#!/usr/bin/env node

var _ = require('underscore'),
    AssetGraph = require('assetgraph'),
    query = AssetGraph.query,
    urlTools = require('assetgraph/lib/util/urlTools'),
    commandLineOptions = require('optimist')
        .usage('$0 --root <inputRootDirectory> [--label <labelName>=<dir> ...] [--locale <localeId>,...] [--cssimports] [--inline <wildCard>] [--watch] [--version <versionTag>] <htmlFile> ...')
        .boolean('cssimports')
        .demand(['root'])
        .argv,
    supportedLocaleIds = commandLineOptions.locale && _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");}));

require('../lib/registerTransforms');

new AssetGraph({root: commandLineOptions.root})
    .on('afterTransform', function (transform, elapsedTime) {
        console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
    })
    .on('error', function (err) {
        console.error(err.stack);
        process.exit(1);
    })
    // Transform:
    .if(commandLineOptions.watch)
        .startOverIfAssetSourceFilesChange()
    .endif()
    .registerRequireJsConfig()
    .registerLabelsAsCustomProtocols(commandLineOptions.label)
    .loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl))
    .moveAssets({isInitial: true}, function (asset) {return asset.url.replace(/\.template$/, "");})
    .if(commandLineOptions.version)
        .addContentVersionMetaElement({type: 'Html'}, commandLineOptions.version)
    .endif()
    .populate({
        followRelations: {
            type: ['HtmlScript', 'HtmlRequireJsMain', 'JavaScriptAmdRequire', 'JavaScriptAmdDefine', 'JavaScriptOneInclude', 'JavaScriptExtJsRequire'],
            to: {url: query.not(/^https?:/)}
        }
    })
    .injectOneBootstrapper({isInitial: true}, {supportedLocaleIds: supportedLocaleIds, localeCookieName: commandLineOptions.localecookiename})
    .flattenStaticIncludes({isInitial: true})
    .removeAssets({isEmpty: true, type: 'JavaScript'})
    .inlineRelations({type: 'HtmlStyle', from: {isInitial: true, type: 'Html'}, to: {fixedUpExtJS: true}})
    .if(commandLineOptions.cssimports)
        .convertHtmlStylesToInlineCssImports()
    .endif()
    .inlineRelations({type: 'HtmlScript', from: {isInitial: true, type: 'Html'}, to: {fixedUpExtJS: true}})
    .prettyPrintAssets({type: 'JavaScript', incoming: {type: 'HtmlScript', from: {isInitial: true, type: 'Html'}}})
    .prettyPrintAssets({type: 'Css', incoming: {type: 'HtmlStyle', from: {isInitial: true, type: 'Html'}}})
    .runJavaScriptConditionalBlocks({type: 'Html'}, 'buildDevelopment')
    .if(commandLineOptions.inline)
        .inlineRelations({to: {url: urlTools.makeFileUrlMatcher(commandLineOptions.inline)}})
    .endif()
    .prettyPrintAssets({isInitial: true})
    .writeAssetsToDisc({isInitial: true})
    .run();
