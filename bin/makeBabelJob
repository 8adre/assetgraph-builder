#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    _ = require('underscore'),
    AssetGraph = require('assetgraph'),
    i18nTools = require('../lib/util/i18nTools'),
    uglifyAst = require('assetgraph/lib/util/uglifyAst'),
    urlTools = require('assetgraph/lib/util/urlTools'),
    mkpathSync = require('../lib/util/mkpathSync'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] --babeldir=<dirForBabelFiles> --root <inputRootDirectory> --locale <localeId>,... <htmlFile>...')
        .demand(['root', 'locale', 'babeldir'])
        .argv,
    localeIds = _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");}));

require('../lib/registerTransforms');

mkpathSync(commandLineOptions.babeldir);

new AssetGraph({root: commandLineOptions.root})
    .on('afterTransform', function (transform, elapsedTime) {
        console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
    }).on('error', function (err) {
        console.error(err.stack);
        process.exit(1);
    })
    .registerLabelsAsCustomProtocols(commandLineOptions.label)
    .loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl))
    .populate({
        followRelations: {type: ['HtmlScript', 'JavaScriptOneInclude'],
        to: {url: AssetGraph.query.not(/^https?:/)}}
    })
    .queue(function (assetGraph) {
        var initialHtmlAssets = assetGraph.findAssets({type: 'Html', isInitial: true}),
            oneTrOccurrencesByKey = i18nTools.findOneTrOccurrences(assetGraph, initialHtmlAssets),
            allKeys = i18nTools.extractAllReachableKeys(assetGraph, initialHtmlAssets),
            alreadyTranslatedByKey = {};

        // Note which keys have already been translated to all the locales we've been asked to process:
        Object.keys(allKeys).forEach(function (key) {
            alreadyTranslatedByKey[key] = true;
            localeIds.forEach(function (localeId) {
                var prioritizedLocaleIds = i18nTools.expandLocaleIdToPrioritizedList(localeId);
                for (var i = 0 ; i < prioritizedLocaleIds.length ; i += 1) {
                    if (prioritizedLocaleIds[i] in allKeys[key]) {
                        return;
                    }
                }
                alreadyTranslatedByKey[key] = false;
            });
        });

        localeIds.forEach(function (localeId) {
            var babelSrc = '';
            _.each(oneTrOccurrencesByKey, function (occurrences, key) {
                if (alreadyTranslatedByKey[key]) {
                    return;
                }
                var value,
                    defaultValue,
                    omitExistingValues = false;

                if (key in allKeys && 'en' in allKeys[key]) {
                    defaultValue = allKeys[key].en;
                } else {
                    // Look for a default value in the one.tr|one.trPattern occurrences:
                    occurrences.forEach(function (occurrence) {
                        // FIXME: Warn about multiple different default values?
                        if (occurrence.defaultValueAst && typeof defaultValue === 'undefined') {
                            defaultValue = uglifyAst.astToObj(occurrence.defaultValueAst);
                        }
                    });
                }

                if (key in allKeys && localeId in allKeys[key]) {
                    value = allKeys[key][localeId];
                } else if (defaultValue && /^en(?:$|_|-)/i.test(localeId)) {
                    value = defaultValue;
                } else if (defaultValue) {
                    value = defaultValue;
                    // Use the defaultValue to figure out which babel keys to explode it to (only relevant for structured values):
                    omitExistingValues = true;
                } else {
                    value = '';
                }

                var path = [];
                (function serialize (obj) {
                    if (_.isArray(obj)) {
                        for (var i = 0 ; i < obj.length ; i += 1) {
                            path.push(i);
                            serialize(obj[i]);
                            path.pop();
                        }
                    } else if (typeof obj === 'object' && obj !== null) {
                        for (var propertyName in obj) {
                            path.push(propertyName);
                            serialize(obj[propertyName]);
                            path.pop();
                        }
                    } else {
                        // Assume a type that can be stringified using String(obj):
                        babelSrc += key + path.map(function (pathComponent) {
                            return '[' + pathComponent + ']';
                        }).join("") + "=" + (omitExistingValues ? '' : String(obj).replace(/\\/g, "\\\\").replace(/\n/g, "\\n")) + "\n";
                    }
                }(value));
            });
            var targetBabelFileName = path.resolve(commandLineOptions.babeldir, localeId + '.txt');
            if (babelSrc.length) {
                console.warn("Writing " + targetBabelFileName);
                fs.writeFileSync(targetBabelFileName, babelSrc, 'utf-8');
            } else {
                console.warn("No existing keys for " + localeId + ", not writing " + targetBabelFileName);
            }
        });
    })
    .run();
