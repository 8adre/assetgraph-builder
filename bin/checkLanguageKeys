#!/usr/bin/env node

var optimist = require('optimist'),
    commandLineOptions = optimist
        .usage('$0 --root <inputRootDirectory> [options] <htmlFile(s)>')
        .options('locales', {
            describe: 'Comma-separated list of locales to check',
            type: 'string',
            demand: true
        })
        .options('defaultlocale', {
            describe: 'The locale of the default value in TR statements and tags with a data-i18n attribute',
            type: 'string',
            default: 'en'
        })
        .wrap(72)
        .argv;

if (commandLineOptions.h) {
    optimist.showHelp();
    process.exit(1);
}

var _ = require('underscore'),
    util = require('util'),
    AssetGraph = require('../lib/AssetGraph'),
    i18nTools = require('../lib/i18nTools'),
    query = AssetGraph.query,
    urlTools = require('urltools'),
    rootUrl = commandLineOptions.root && urlTools.urlOrFsPathToUrl(commandLineOptions.root, true),
    localeIds = commandLineOptions.locales && _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {
        return localeId.split(",");
    })).map(i18nTools.normalizeLocaleId),
    defaultLocaleId = commandLineOptions.defaultlocale && i18nTools.normalizeLocaleId(commandLineOptions.defaultlocale),
    inputUrls;

if (commandLineOptions._.length > 0) {
    inputUrls = commandLineOptions._.map(function (urlOrFsPath) {
        return urlTools.urlOrFsPathToUrl(urlOrFsPath, false);
    });
    if (!rootUrl) {
        rootUrl = urlTools.findCommonUrlPrefix(inputUrls.filter(function (inputUrl) {
            return /^file:/.test(inputUrl);
        }));
        if (rootUrl) {
            console.warn("Guessing --root from input files: " + rootUrl);
        }
    }
} else if (rootUrl && /^file:/.test(rootUrl)) {
    inputUrls = [rootUrl + '**/*.html'];
    console.warn('No input files specified, defaulting to ' + inputUrls[0]);
} else {
    throw new Error("No input files and no --root specified (or it isn't file:), cannot proceed");
}

new AssetGraph({root: rootUrl})
    .on('afterTransform', function (transform, elapsedTime) {
        console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
    })
    .on('warn', function (err) {
        // These are way too noisy
        if (err.relationType !== 'JavaScriptCommonJsRequire') {
            console.warn((err.asset ? err.asset.urlOrDescription + ': ' : '') + err.message);
            if (commandLineOptions.stoponwarning) {
                process.exit(1);
            }
        }
    })
    .on('error', function (err) {
        console.error((err.asset ? err.asset.urlOrDescription + ': ' : '') + err.stack);
        process.exit(1);
    })
    .registerRequireJsConfig({preventPopulationOfJavaScriptAssetsUntilConfigHasBeenFound: true})
    .registerLabelsAsCustomProtocols(commandLineOptions.label, {installFindParentDirectoryAsDefault: commandLineOptions.parentdir})
    .loadAssets(inputUrls)
    .populate({from: {type: 'Html'}, followRelations: {type: 'HtmlScript', to: {url: /^file:/}}})
    .assumeRequireJsConfigHasBeenFound()
    .populate({
        followRelations: query.or(
            {to: {type: 'I18n'}},
            {type: query.not(['JavaScriptInclude', 'JavaScriptExtJsRequire', 'JavaScriptCommonJsRequire', 'HtmlAnchor']),
                                                to: {url: query.not(/^https?:/)}})
     })
    .queue(function outputWarningsAboutLanguageKeys() {
        var infoObject = {};
        localeIds.forEach(function (localeId) {
            var allKeysForLocale = i18nTools.extractAllKeysForLocale(assetGraph, localeId),
                trReplacer = i18nTools.createTrReplacer({
                    allKeysForLocale: allKeysForLocale,
                    localeId: localeId,
                    defaultLocaleId: defaultLocaleId,
                    infoObject: infoObject
                }),
                i18nTagReplacer = i18nTools.createI18nTagReplacer({
                    allKeysForLocale: allKeysForLocale,
                    localeId: localeId,
                    defaultLocaleId: defaultLocaleId,
                    infoObject: infoObject
                });

            infoObjectUpdater = i18nTools.createInfoObjectUpdater(infoObject, allKeysForLocale, localeId, defaultLocaleId);
            assetGraph.findAssets({type: assetGraph.query.or('Html', 'Svg', 'Htc')}).forEach(function (asset) {
                i18nTools.eachI18nTagInHtmlDocument(asset.parseTree, function (options) {
                    if (options.type) {
                        // Don't update the info object if it's one of the "fake" occurrences output by i18nTools.eachI18nTagInHtmlDocument
                        // when there's no i18n of the text contents:
                        infoObjectUpdater(options, options.key, allKeysForLocale[options.key]);
                    }
                });
            });
            assetGraph.findAssets({type: 'JavaScript'}).forEach(function (asset) {
                i18nTools.eachTrInAst(asset.parseTree, function (options) {
                    infoObjectUpdater(options, options.key, allKeysForLocale[options.key]);
                });
            });
        });
        console.warn(i18nTools.formatWarningsAboutLanguageKeys(infoObject, defaultLocaleId));
    })
    .run();
