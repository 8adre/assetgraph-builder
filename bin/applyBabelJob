#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    _ = require('underscore'),
    AssetGraph = require('assetgraph'),
    transforms = require('../lib/transforms'),
    i18nTools = require('../lib/util/i18nTools'),
    uglifyAst = require('assetgraph/lib/util/uglifyAst'),
    urlTools = require('assetgraph/lib/util/urlTools'),
    mkpathSync = require('../lib/util/mkpathSync'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] --babeldir=<dirContainingTheBabelFilesToApply> --root <inputRootDirectory> <htmlFile>...')
        .demand(['root', 'babeldir'])
        .argv;

new AssetGraph({root: commandLineOptions.root}).on('afterTransform', function (transform, elapsedTime) {
    console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
}).on('error', function (err) {
    console.error(err.stack);
    process.exit(1);
}).queue(
    transforms.registerLabelsAsCustomProtocols(commandLineOptions.label),
    transforms.loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl)),
    transforms.populate({followRelations: {type: ['HtmlScript', 'JavaScriptOneInclude'], to: {url: AssetGraph.query.not(/^https?:/)}}}),
    function (assetGraph) {
        var translationsByKeyAndLocaleId = {},
            existingI18nRelations = assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}}),
            oneTrOccurrencesByKey = i18nTools.findOneTrOccurrences(assetGraph, assetGraph.findAssets({type: 'Html', isInitial: true}));

        fs.readdirSync(commandLineOptions.babeldir).forEach(function (fileName) {
            if (fileName === 'SOURCE.txt') {
                console.warn("Skipping " + fileName);
            } else {
                var matchLocaleId = fileName.match(/^([a-zA-Z0-9\-\_]+)\.(?:txt|babel)$/);
                if (matchLocaleId) {
                    var localeId = matchLocaleId[1].replace(/-/g, "_"),
                        babelBody = fs.readFileSync(path.resolve(commandLineOptions.babeldir, fileName), 'utf-8');

                    babelBody.split(/\r?\n|\r\n?/).forEach(function (line, lineNumber) {
                        if (!/^\s*\#|^\s*$/.test(line)) { // Skip comments and empty lines
                            var matchKeyValue = line.match(/^([^=]+)=(.*)$/);
                            if (matchKeyValue) {
                                var key = matchKeyValue[1].trim(),
                                    value = matchKeyValue[2].trim();
                                if (!(key in translationsByKeyAndLocaleId)) {
                                    translationsByKeyAndLocaleId[key] = {};
                                }
                                translationsByKeyAndLocaleId[key][localeId] = value.replace(/\\([n\\])/, function ($0, ch) {
                                    return ch === "n" ? "\n" : ch;
                                });
                            } else {
                                console.warn("Couldn't parse line " + (lineNumber + 1) + " of the " + localeId + " file: " + line);
                            }
                        }
                    });
                }
            }
        });
        _.keys(translationsByKeyAndLocaleId).forEach(function (key) {
            var i18nAsset = i18nTools.getOrCreateI18nAssetForKey(assetGraph, key, oneTrOccurrencesByKey);
            if (!(key in i18nAsset.parseTree)) {
                i18nAsset.parseTree[key] = {};
                i18nAsset.markDirty();
            }
            _.each(translationsByKeyAndLocaleId[key], function (translation, localeId) {
                if (!(localeId in i18nAsset.parseTree[key]) || translation !== i18nAsset.parseTree[key][localeId]) {
                    i18nAsset.parseTree[key][localeId] = translation;
                    i18nAsset.markDirty();
                }
            });
        });

        // Find the JavaScript => I18n relations that didn't exist when we started:
        var newI18nRelationsByJavaScriptId = {};
        assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}}).forEach(function (i18nRelation) {
            if (existingI18nRelations.indexOf(i18nRelation) === -1) {
                (newI18nRelationsByJavaScriptId[i18nRelation.from.id] = newI18nRelationsByJavaScriptId[i18nRelation.from.id] || []).push(i18nRelation);
            }
        });

        // Hack: Inject the new relations at the top of the file
        _.each(newI18nRelationsByJavaScriptId, function (i18nRelations, javaScriptId) {
            var javaScript = assetGraph.idIndex[javaScriptId],
                oneIncludeStatements = i18nRelations.map(function (i18nRelation) {
                    return "one.include('" +
                        urlTools.buildRelativeUrl(i18nRelation.from.url || assetGraph.findBaseAssetForRelation(i18nRelation).url, i18nRelation.to.url) +
                        "');\n";
                }).join(""),
                matchSplitAfterLastOneIncludeLine = javaScript.text.match(/^([\s\S]*one\.include[^\n]*\n)([\s\S]*)$/);
            if (matchSplitAfterLastOneIncludeLine) {
                javaScript.text = matchSplitAfterLastOneIncludeLine[1] + "\n" + oneIncludeStatements + matchSplitAfterLastOneIncludeLine[2];
            } else {
                javaScript.text = oneIncludeStatements + javaScript.text;
            }
        });
    },
    transforms.prettyPrintAssets({type: 'I18n', isDirty: true}),
    transforms.stats(),
    transforms.writeAssetsToDisc({type: ['I18n', 'JavaScript'], isDirty: true})
).run();
