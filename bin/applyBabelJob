#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    _ = require('underscore'),
    extend = require('extend'),
    AssetGraph = require('../lib/AssetGraph'),
    i18nTools = require('../lib/i18nTools'),
    urlTools = require('urltools'),
    mkpathSync = require('../lib/mkpathSync'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] [--parentdir] [--i18n <pathToI18nFile>] [--locales <localeId>[,<localeId>...]] --babeldir=<dirContainingTheBabelFilesToApply> --root <inputRootDirectory> <htmlFile>...')
        .boolean('parentdir')
        .demand(['root', 'babeldir'])
        .argv,
    localeIds = commandLineOptions.locales && _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {
        return localeId.split(",");
    })).map(i18nTools.normalizeLocaleId),
    initialAssetUrls = commandLineOptions._.map(urlTools.fsFilePathToFileUrl),
    i18nUrl;

function isArrayOrObject(obj) {
    return Array.isArray(obj) || (obj && typeof obj === 'object');
}

if (commandLineOptions.i18n) {
    i18nUrl = urlTools.fsFilePathToFileUrl(commandLineOptions.i18n);
    initialAssetUrls.push(i18nUrl);
}

new AssetGraph({root: commandLineOptions.root})
    .on('afterTransform', function (transform, elapsedTime) {
        console.log((elapsedTime / 1000).toFixed(3) + " secs: " + transform.name);
    })
    .on('warn', function (err) {
        // These are way too noisy
        if (err.relationType !== 'JavaScriptCommonJsRequire') {
            console.warn((err.asset ? err.asset.urlOrDescription + ': ' : '') + err.message);
            if (commandLineOptions.stoponwarning) {
                process.exit(1);
            }
        }
    })
    .on('error', function (err) {
        console.error((err.asset ? err.asset.urlOrDescription + ': ' : '') + err.stack);
        process.exit(1);
    })
    .registerRequireJsConfig({preventPopulationOfJavaScriptAssetsUntilConfigHasBeenFound: true})
    .registerLabelsAsCustomProtocols(commandLineOptions.label, {installFindParentDirectoryAsDefault: commandLineOptions.parentdir})
    .loadAssets(initialAssetUrls)
    .populate({from: {type: 'Html'}, followRelations: {type: 'HtmlScript', to: {url: /^file:/}}})
    .assumeRequireJsConfigHasBeenFound()
    .fixBaseAssetsOfUnresolvedOutgoingRelationsFromHtmlFragments({isInitial: true})
    .assumeThatAllHtmlFragmentAssetsWithoutIncomingRelationsAreNotTemplates()
    .populate({
        followRelations: {
            type: AssetGraph.query.not('HtmlAnchor'),
            to: {url: AssetGraph.query.not(/^https?:/)}
        }
    })
    .queue(function importLanguageKeys(assetGraph) {
        var translationsByKeyAndLocaleId = {},
            existingI18nRelations = assetGraph.findRelations({to: {type: 'I18n'}, from: {type: 'JavaScript'}}),
            occurrencesByKey = i18nTools.findOccurrences(assetGraph, assetGraph.findAssets({type: 'Html', isInitial: true})),
            i18nAssetForAllKeys;

        if (i18nUrl) {
            i18nAssetForAllKeys = assetGraph.findAssets({url: i18nUrl})[0];
            if (!i18nAssetForAllKeys) {
                console.error('--i18n ' + commandLineOptions.i18n + ': not found');
                process.exit(1);
            }
        }

        var isSeenByLocaleId = {};

        fs.readdirSync(commandLineOptions.babeldir).forEach(function (fileName) {
            if (fileName === 'SOURCE.txt') {
                console.warn("Skipping " + fileName);
            } else {
                var matchLocaleId = fileName.match(/^([a-zA-Z0-9\-\_]+)\.(?:txt|babel)$/);
                if (matchLocaleId) {
                    var localeId = i18nTools.normalizeLocaleId(matchLocaleId[1]),
                        babelBody = fs.readFileSync(path.resolve(commandLineOptions.babeldir, fileName), 'utf-8');

                    isSeenByLocaleId[localeId] = true;

                    if (localeIds && localeIds.indexOf(localeId) === -1) {
                        console.warn('Skipping ' + fileName + ' because ' + localeId + ' was not mentioned in --locales');
                        return;
                    }

                    babelBody.split(/\r?\n|\r\n?/).forEach(function (line, lineNumber) {
                        if (!/^\s*\#|^\s*$/.test(line)) { // Skip comments and empty lines
                            var matchKeyValue = line.match(/^([^=]+)=(.*)$/);
                            if (matchKeyValue) {
                                var key = matchKeyValue[1].trim(),
                                    value = matchKeyValue[2].trim().replace(/\\([n\\])/, function ($0, ch) {
                                        return ch === "n" ? "\n" : ch;
                                    }),
                                    path = [];

                                // If the value looks like a number, we want it to be a number in our JSON representation
                                if (/^(?:[1-9][0-9]*(?:\.[0-9]*)?)$/.test(value)) { // Doesn't match ".nnn", "n." or exponential notation (on purpose)
                                    value = parseFloat(value);
                                }
                                // Chop off [x][y]... suffix and note the components in the 'path' array
                                key = key.replace(/\[([^\]]+)\]/g, function ($0, pathComponent) {
                                    path.push(pathComponent);
                                    return "";
                                });
                                if (!(key in translationsByKeyAndLocaleId)) {
                                    translationsByKeyAndLocaleId[key] = {};
                                }
                                path.unshift(localeId);
                                var cursor = translationsByKeyAndLocaleId[key];
                                while (path.length > 1) {
                                    if (/^(?:[0-9]|[1-9][0-9]*)$/.test(path[1])) {
                                        // Integer path component, assume that cursor[nextIndex] should be an array
                                        if (typeof cursor[path[0]] === 'undefined') {
                                            cursor[path[0]] = [];
                                        } else if (!Array.isArray(cursor[path[0]])) {
                                            throw new Error("Error: Expected " + JSON.stringify(cursor) + "['" + path[0] + "'] " +
                                                            "to be undefined or an array while processing line " + lineNumber + " of " + fileName + ":\n" + line);
                                        }
                                    } else {
                                        // typeof path[1] === 'string', assume that cursor[path[0]] should be an object
                                        if (typeof cursor[path[0]] === 'undefined') {
                                            cursor[path[0]] = {};
                                        } else if (typeof cursor[path[0]] !== 'object' || cursor[path[0]] === null) {
                                            throw new Error("Error: Expected " + JSON.stringify(cursor) + "['" + path[0] + "'] " +
                                                            "to be undefined or an object while processing line " + lineNumber + " of " + fileName + ":\n" + line);
                                        }
                                    }
                                    cursor = cursor[path.shift()];
                                }
                                if (path[0] in cursor) {
                                    throw new Error("Error: Found double declaration of key in line " + lineNumber + " of " + fileName + ":\n" + line);
                                }
                                cursor[path[0]] = value;
                            } else {
                                console.warn("Couldn't parse line " + (lineNumber + 1) + " of the " + localeId + " file: " + line);
                            }
                        }
                    });
                } else {
                    console.warn('Skipping file whose basename does not look like a locale id: ' + fileName);
                }
            }
        });
        if (localeIds) {
            localeIds.forEach(function (localeId) {
                if (!isSeenByLocaleId[localeId]) {
                    console.warn(localeId + '.txt was not found although --locales ' + localeId + ' was specified');
                }
            });
        }
        Object.keys(translationsByKeyAndLocaleId).forEach(function (key) {
            var i18nAsset;
            try {
                i18nAsset = i18nAssetForAllKeys || i18nTools.getOrCreateI18nAssetForKey(assetGraph, key, occurrencesByKey);
            } catch (e) {
                console.warn("Skipping language key: " + e.message);
            }
            if (i18nAsset) {
                if (!(key in i18nAsset.parseTree)) {
                    i18nAsset.parseTree[key] = {};
                    i18nAsset.markDirty();
                }
                Object.keys(translationsByKeyAndLocaleId[key]).forEach(function (localeId) {
                    var newTranslation = translationsByKeyAndLocaleId[key][localeId],
                        existingTranslation = i18nAsset.parseTree[key][localeId];

                    function setMergedTranslation(mergedTranslation) {
                        i18nAsset.parseTree[key][localeId] = mergedTranslation;
                        i18nAsset.markDirty();
                    }

                    if (isArrayOrObject(existingTranslation) && isArrayOrObject(existingTranslation)) {
                        // Do a 'deep extend' to update existing complex value:
                        setMergedTranslation(extend(true, existingTranslation, newTranslation));
                    } else if (typeof existingTranslation === 'undefined' ||
                               isArrayOrObject(existingTranslation) !== isArrayOrObject(newTranslation) ||
                               existingTranslation !== newTranslation) {
                        setMergedTranslation(newTranslation);
                    }
                });
            }
        });
    })
    .prettyPrintAssets({type: 'I18n', isDirty: true})
    .writeStatsToStderr()
    .writeAssetsToDisc({type: 'I18n', isDirty: true})
    .run();
