#!/usr/bin/env node

var fs = require('fs'),
    _ = require('underscore'),
    seq = require('seq'),
    AssetGraph = require('assetgraph'),
    urlTools = require('assetgraph/lib/util/urlTools'),
    commandLineOptions = require('optimist').
        usage('$0 [--label <labelName>=<dir> ...] [--root <dir>] [-o <outputJavaScriptFile>] <inputJavaScriptFile>').
        check(function (argv) {
            if (argv._.length !== 1 || !/\.js$/.test(argv._[0])) {
                throw "Please specify a single JavaScript file on the command line";
            }
        }).
        argv;

require('../lib/registerTransforms');

new AssetGraph({root: commandLineOptions.root})
    .on('error', function (err) {
        console.error(err.stack);
        process.exit(1);
    })
    .registerLabelsAsCustomProtocols(commandLineOptions.label)
    .loadAssets(commandLineOptions._.map(urlTools.fsFilePathToFileUrl))
    .populate({followRelations: {type: 'JavaScriptOneInclude'}})
    .queue(function (assetGraph) {
        assetGraph.findAssets({isInitial: true}).forEach(function (initialAsset) {
            // Get the original text including comments etc.:
            seq(assetGraph.collectAssetsPostOrder(initialAsset, {to: {type: 'JavaScript'}}).filter(function(asset) {return !asset.isInline;}))
                .parMap(function (asset) {
                    fs.readFile(urlTools.fileUrlToFsPath(asset.url), 'utf-8', this);
                })
                .unflatten()
                .seq(function (texts) {
                    var flattenedText = texts.join("\n").replace(/one\.include\(([^\)]*)\);?\n?/g, "");
                    if ('o' in commandLineOptions) {
                        fs.writeFileSync(commandLineOptions.o, flattenedText, AssetGraph.assets.JavaScript.prototype.encoding);
                    } else {
                        console.log(flattenedText);
                    }
                });
        });
    })
    .run();
